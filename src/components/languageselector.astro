---
// src/components/LanguageSelector.astro
import { getCurrentLanguage } from "../utils/i18n";

interface Props {
  showFlag?: boolean;
  languageMapping?: Record<string, string>;
  class?: string;
}

const { 
  showFlag = true, 
  languageMapping = {},
  class: className = "appearance-none py-1 px-2 rounded bg-slate-100 dark:bg-stone-950"
} = Astro.props;

const currentLang = getCurrentLanguage(Astro.url);

const languages = [
  { code: 'en', name: 'English', flag: '🇺🇸' },
  { code: 'it', name: 'Italiano', flag: '🇮🇹' },
  { code: 'fr', name: 'Français', flag: '🇫🇷' },
  { code: 'de', name: 'Deutsch', flag: '🇩🇪' },
  { code: 'es', name: 'Español', flag: '🇪🇸' },
  { code: 'hi', name: 'हिंदी', flag: '🇮🇳' },
  { code: 'ar', name: 'العربية', flag: '🇸🇦' },
  { code: 'id', name: 'Bahasa Indonesia', flag: '🇮🇩' },
  { code: 'ru', name: 'Русский', flag: '🇷🇺' },
  { code: 'pt', name: 'Português', flag: '🇵🇹' },
  { code: 'ko', name: '한국어', flag: '🇰🇷' },
  { code: 'tl', name: 'Filipino', flag: '🇵🇭' },
  { code: 'nl', name: 'Nederlands', flag: '🇳🇱' },
  { code: 'ms', name: 'Bahasa Melayu', flag: '🇲🇾' },
  { code: 'tr', name: 'Türkçe', flag: '🇹🇷' },
];

// Apply custom language mapping if provided
const mappedLanguages = languages.map(lang => ({
  ...lang,
  name: languageMapping[lang.code] || lang.name
}));

const currentLanguage = mappedLanguages.find(lang => lang.code === currentLang) || mappedLanguages[0];

// Get the current path without language prefix for switching
const currentPath = Astro.url.pathname.replace(/^\/[a-z]{2}(\/|$)/, '/');
---

<div class="relative" x-data="{ open: false }">
  <button
    @click="open = !open"
    @click.away="open = false"
    class={className}
  >
    {showFlag && <span class="text-lg mr-2">{currentLanguage.flag}</span>}
    <span class="text-sm font-medium">{currentLanguage.name}</span>
    <svg 
      class="w-4 h-4 ml-2 transition-transform inline" 
      :class="{ 'rotate-180': open }"
      fill="none" 
      stroke="currentColor" 
      viewBox="0 0 24 24"
    >
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>
  
  <div
    x-show="open"
    x-transition:enter="transition ease-out duration-200"
    x-transition:enter-start="opacity-0 scale-95"
    x-transition:enter-end="opacity-100 scale-100"
    x-transition:leave="transition ease-in duration-75"
    x-transition:leave-start="opacity-100 scale-100"
    x-transition:leave-end="opacity-0 scale-95"
    class="absolute right-0 top-full mt-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-50"
    style="display: none;"
  >
    <div class="py-1 max-h-60 overflow-y-auto">
      {mappedLanguages.map((language) => {
        const href = language.code === 'en' ? currentPath : `/${language.code}${currentPath}`;
        const isActive = language.code === currentLang;
        
        return (
          <a
            href={href}
            class={`flex items-center px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors ${
              isActive ? 'bg-blue-50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400' : 'text-gray-700 dark:text-gray-300'
            }`}
          >
            {showFlag && <span class="mr-3 text-lg">{language.flag}</span>}
            <span class="flex-1">{language.name}</span>
            {isActive && (
              <svg class="w-4 h-4 text-blue-600 dark:text-blue-400" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
              </svg>
            )}
          </a>
        );
      })}
    </div>
  </div>
</div>